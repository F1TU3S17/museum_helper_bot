import time

import pytz
from helpful_function import shorten_url
from database import *
from admin_database import *
from password import *
from excel import *
from admin_fucnction import *
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram import exceptions
from aiogram.utils.chat_action import ChatActionSender
from aiogram.exceptions import TelegramAPIError
from aiogram.utils import chat_action
import keyboards as kb

router_admin_panel = Router()
bot = Bot(token='6971765827:AAGGYCGi7ouJ_0A5ZKwFX-VPbm5Cl_sSI68')

class Admin(StatesGroup):
    login = State()
    password = State()
    logined = State()
    message = State()
    mailing = State()
    edit_event = State()

@router_admin_panel.message(Command('login'))
async def start_login(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    if not(check_admin(tg_id)):
        await message.answer('***–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω***', parse_mode='Markdown')
        await state.set_state(Admin.login)
    else:
        await message.answer('–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!',reply_markup=kb.admin_kb)
        await state.set_state(Admin.logined)

@router_admin_panel.message(Admin.login)
async def set_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer('***–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å***', parse_mode='Markdown')
    await state.set_state(Admin.password)

@router_admin_panel.message(Admin.password)
async def set_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    data = await state.get_data()
    data_login = data.get('login')
    data_password = data.get('password')

    await message.answer('***–í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥***‚è≥', parse_mode='Markdown')
    if authenticate_admin(data_login, data_password):
        await state.clear()
        tg_id = message.from_user.id
        moscow_tz = pytz.timezone('Europe/Moscow')
        date = message.date
        date_msk = date.astimezone(moscow_tz)
        await add_authorized_admin(tg_id, date_msk)
        await state.set_state(Admin.logined)
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ,–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /admin, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç',
                             reply_markup=kb.admin_kb)
    else:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≥–æ!\n', reply_markup=kb.main)

@router_admin_panel.message(Command('admin'))
async def start_admin(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    if (check_admin(tg_id)):
        await message.answer('–í–æ—Ç –≤–∞—à–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb.admin_kb)
        await state.set_state(Admin.logined)


@router_admin_panel.message(F.text == '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—Éüì£', Admin.logined)
async def start_mailing(message: Message, state: FSMContext):
    await message.answer('–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ä–∞—Å—Å—ã–ª–∫—É.\n–î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å', reply_markup=kb.admin_kb)
    await state.set_state(Admin.message)
@router_admin_panel.message(Admin.message)
async def get_message_mailing(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    await message.answer('–ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=kb.submit_kb)
    await state.set_state(Admin.mailing)


async def send_message_to_malling(users, data_message):
    for i in users:
        try:
            await bot.send_message(i[0], data_message, parse_mode='Markdown')
        except exceptions.TelegramForbiddenError:
            print(i, 'ban')
        except Exception as e:
            print(f'warning for {i[0]}: {e}')


@router_admin_panel.message(Admin.mailing)
async def go_mailing(message: Message, state: FSMContext):
    await state.update_data(mailing=message.text)
    data = await state.get_data()
    mailing = data.get('mailing')
    if mailing == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        data_message = str(data.get('message'))
        users = await users_list()
        await message.answer('***–í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É***‚è≥', parse_mode='Markdown')
        try:
            await send_message_to_malling(users, data_message)
        except exceptions.TelegramForbiddenError:
            print('ban')
        except Exception as e:
            print(f'warning')
        await message.answer(f'***–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º*** ***–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º***üìß', parse_mode='Markdown', reply_markup=kb.admin_kb)
    else:
        await message.answer('–ö–∞–∫ –≤–∞–º —É–≥–æ–¥–Ω–æüòä', reply_markup=kb.admin_kb)
    await state.clear()
    await state.set_state(Admin.logined)


class AddEvent(StatesGroup):
    name = State()
    describe = State()
    start_time = State()
    end_time = State()
    last_data = State()
    add_data = State()
    cost = State()
    url = State()


@router_admin_panel.message(F.text == ('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–πüìÖ'), Admin.logined)
async def start_edit_events(message: Message):
    #df = init_table()
    await message.answer('–í—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å',reply_markup=kb.event_editor_kb)


@router_admin_panel.callback_query(lambda c: c.data.startswith("add_event"))
async def edit_event(cq: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data_name = str(data.get('name'))
    data_describe = str(data.get('describe'))
    data_start_time = str(data.get('start_time'))
    data_end_time = str(data.get('end_time'))
    data_cost = str(data.get('cost'))
    data_url = str(data.get('url'))
    count_none = count_none_info(data_name, data_describe, data_start_time, data_end_time, data_cost, data_url)
    is_can_add = not(bool(count_none))
    if count_none:
        await cq.message.answer(f'–ï—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ***{count_none}/6*** —è—á–µ–µ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ',
                                reply_markup=kb.create_add_kb(is_can_add), parse_mode='Markdown')
    else:
        await cq.message.answer('–í—Å–µ —è—á–µ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º—Ü–∏—é',
                                reply_markup=kb.create_add_kb(is_can_add), parse_mode='Markdown')
    await cq.message.edit_text('–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', reply_markup=kb.create_add_event_kb(data_name, data_describe, data_start_time, data_end_time, data_cost, data_url))

@router_admin_panel.callback_query(lambda c: c.data.startswith("name") or c.data.startswith('describe') or c.data.startswith('start_time') or c.data.startswith('end_time')
                                             or c.data.startswith('cost') or c.data.startswith('ticket_url'))
async def edit_event_param(cq: CallbackQuery, state: FSMContext):
    if cq.data.startswith("name"):
        await state.set_state(AddEvent.name)
        await cq.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
    elif cq.data.startswith("describe"):
        await state.set_state(AddEvent.describe)
        await cq.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
    elif cq.data.startswith("start_time"):
        await state.set_state(AddEvent.start_time)
        await cq.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î:–ú–ú:–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°')
    elif cq.data.startswith("end_time"):
        await state.set_state(AddEvent.end_time)
        await cq.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î:–ú–ú:–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°')
    elif cq.data.startswith("cost"):
        await state.set_state(AddEvent.cost)
        await cq.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ö–æ–¥–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ(–µ—Å–ª–∏ –æ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ: \"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ\" ')
    elif cq.data.startswith("ticket_url"):
        await state.set_state(AddEvent.url)
        await cq.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ(–µ—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: \"-\" –∏–ª–∏ \"–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç\" ')

@router_admin_panel.message(AddEvent.name)
async def add_event_name(message:Message, state: FSMContext):
    data = await state.get_data()
    data_type = ("name:" + str(data.get('name')))
    await state.update_data(name=message.text)
    await state.update_data(last_data=data_type)
    await message.answer('–ß—Ç–æ –¥–µ–ª–∞–µ–º?', reply_markup=kb.add_event_param)
    await state.set_state(Admin.logined)

@router_admin_panel.message(AddEvent.describe)
async def add_event_describe(message:Message, state: FSMContext):
    data = await state.get_data()
    data_type = ("describe:"+str(data.get('describe')))
    await state.update_data(describe=message.text)
    await state.update_data(last_data=data_type)
    await message.answer('–ß—Ç–æ –¥–µ–ª–∞–µ–º?', reply_markup=kb.add_event_param)
    await state.set_state(Admin.logined)

@router_admin_panel.message(AddEvent.start_time)
async def add_event_start_time(message:Message, state: FSMContext):
    data = await state.get_data()
    data_type = ("start_time:" + str(data.get('start_time')))
    await state.update_data(start_time=message.text)
    await state.update_data(last_data=data_type)
    if validate_datetime_format(str(message.text)):
        await message.answer('–ß—Ç–æ –¥–µ–ª–∞–µ–º?', reply_markup=kb.add_event_param)
        await state.set_state(Admin.logined)
    else:
        await message.answer('–í–≤–µ–¥–µ–Ω–∞—è –≤–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É "–î–î:–ú–ú:–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')


@router_admin_panel.message(AddEvent.end_time)
async def add_event_end_time(message:Message, state: FSMContext):
    data = await state.get_data()
    data_type = ("end_time:" + str(data.get('end_time')))
    await state.update_data(end_time=message.text)
    await state.update_data(last_data=data_type)
    if validate_datetime_format(str(message.text)):
        await message.answer('–ß—Ç–æ –¥–µ–ª–∞–µ–º?', reply_markup=kb.add_event_param)
        await state.set_state(Admin.logined)
    else:
        await message.answer('–í–≤–µ–¥–µ–Ω–∞—è –≤–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É "–î–î:–ú–ú:–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')


@router_admin_panel.message(AddEvent.cost)
async def add_event_name(message:Message, state: FSMContext):
    data = await state.get_data()
    data_type = ("cost:" + str(data.get('cost')))
    await state.update_data(cost=message.text)
    await state.update_data(last_data=data_type)
    await message.answer('–ß—Ç–æ –¥–µ–ª–∞–µ–º?', reply_markup=kb.add_event_param)
    await state.set_state(Admin.logined)

@router_admin_panel.message(AddEvent.url)
async def add_event_name(message:Message, state: FSMContext):
    data = await state.get_data()
    data_type = ("url:" + str(data.get('url')))
    user_url = message.text
    if str(message.text).startswith('https://'):
        user_url = shorten_url(message.text)
    await state.update_data(url=user_url)
    await state.update_data(last_data=data_type)
    await message.answer('–ß—Ç–æ –¥–µ–ª–∞–µ–º?', reply_markup=kb.add_event_param)
    await state.set_state(Admin.logined)

@router_admin_panel.callback_query(lambda c: c.data.startswith("last_event"))
async def last_param(cq: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data_last = str(data.get('last_data')).split(':')
    state_name = data_last[0]
    state_data = data_last[1]
    await state.update_data({str(state_name):state_data})
    new_data = await state.get_data()
    data_name = str(new_data.get('name'))
    data_describe = str(new_data.get('describe'))
    data_start_time = str(new_data.get('start_time'))
    data_end_time = str(new_data.get('end_time'))
    data_cost = str(data.get('cost'))
    data_url = str(data.get('url'))
    await cq.message.edit_text('–•–æ—Ä–æ—à–æ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã', reply_markup=kb.create_add_event_kb(data_name, data_describe, data_start_time,
                                                                                                 data_end_time, data_cost, data_url))

@router_admin_panel.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", Admin.logined)
async def add_event(message:Message, state: FSMContext):
    data = await state.get_data()
    data_name = str(data.get('name'))
    data_describe = str(data.get('describe'))
    data_start_time = str(data.get('start_time'))
    data_end_time = str(data.get('end_time'))
    data_cost = str(data.get('cost'))
    data_url = str(data.get('url'))
    await add_event_to_excel(data_name, data_describe, data_start_time, data_end_time, data_cost, data_url)
    #await state.clear()
    await state.set_state(Admin.logined)
    await message.answer('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–ë—É–¥–µ–º –æ–ø–æ–≤–µ—â–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± —ç—Ç–æ–º ?', reply_markup=kb.go_meling)

@router_admin_panel.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", Admin.logined)
async def no_add_event(message:Message, state: FSMContext):
    await state.clear()
    await state.set_state(Admin.logined)
    await message.answer('–•–æ—Ä–æ—à–æ, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –±—É–¥–µ—Ç –Ω–∏—á–µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å!', reply_markup=kb.admin_kb)

@router_admin_panel.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É‚úî", Admin.logined)
async def go_mailing_about_event(message:Message, state: FSMContext):
    data = await state.get_data()
    data_name = str(data.get('name'))
    data_start_time = str(data.get('start_time'))
    data_end_time = str(data.get('end_time'))
    users = await users_list()
    data_message = (f'–£–≤–∞–∂–∞–π–º—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –º—É–∑–µ—è, —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—è–≤–∏–ª–∞—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏:***{data_name}***üî•\n'
                    f'–û–Ω–æ –Ω–∞—á–Ω–µ—Ç—Å—è:***{data_start_time} –∏ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –¥–æ {data_end_time}***\n‚è≥'
                    f'–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–æ–∂–Ω–æ –≤ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π!üìã')
    await message.answer('***–í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É***‚è≥', parse_mode='Markdown')
    try:
        await send_message_to_malling(users, data_message)
    except exceptions.TelegramForbiddenError:
        print('ban')
    except Exception as e:
        print(f'warning')
    await message.answer(f'***–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º*** ***–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º***üìß', parse_mode='Markdown',
                         reply_markup=kb.admin_kb)
    await state.clear()
    await state.set_state(Admin.logined)
@router_admin_panel.message(F.text == "–ù–µ –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", Admin.logined)
async def no_mailing_about_event(message:Message, state: FSMContext):
    await state.clear()
    await state.set_state(Admin.logined)
    await message.answer('–•–æ—Ä–æ—à–æ, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –±—É–¥–µ—Ç –Ω–∏—á–µ–≥–æ —Ä–∞—Å—Å—ã–ª–∞—Ç—å!', reply_markup=kb.admin_kb)

@router_admin_panel.callback_query(lambda c: c.data.startswith("delete_event"))
async def list_event(cq: CallbackQuery):
    await get_del_unnecessary_review()
    await cq.message.edit_text('–í—ã–±–∏—Ä–∞–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å!',
                               reply_markup=kb.create_admin_event_list())
@router_admin_panel.callback_query(lambda c: c.data.startswith("to_admin"))
async def to_admin_panel(cq: CallbackQuery):
    await cq.message.delete()
    await cq.message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!', reply_markup=kb.admin_kb)

@router_admin_panel.callback_query(lambda c: c.data.startswith("to_delete"))
async def event_del(cq: CallbackQuery):
    event_index = cq.data.split(":")[1]
    event_name = list(events_data.keys())[int(event_index)]
    event_describe = events_data[event_name]
    event_avg_mark = await avg_mark_review(event_name)
    event_count_review = await count_review(event_name)
    await cq.message.edit_text(f'–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?\n'
                               f'{event_name}\n{event_describe}\n'
                               f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {event_count_review} –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {event_avg_mark}/5',
                               reply_markup=kb.create_del_or_no_kb(event_index)
                               )

@router_admin_panel.callback_query(lambda c: c.data.startswith("go_del"))
async def delete(cq: CallbackQuery):
    event_index = cq.data.split(":")[1]
    event_name = list(events_data.keys())[int(event_index)]
    await delete_event(event_name)
    await cq.message.edit_text('–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', reply_markup=kb.create_admin_event_list())
    await get_del_unnecessary_review()

@router_admin_panel.callback_query(lambda c: c.data.startswith("to_list"))
async def to_list(cq: CallbackQuery):
    await cq.message.edit_text('–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É', reply_markup=kb.create_admin_event_list())

@router_admin_panel.callback_query(lambda c: c.data.startswith("to_events"))
async def list_review(cq: CallbackQuery):
    await get_del_unnecessary_review()
    await debug_index()
    await cq.message.edit_text('–í–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –æ—Ç–∑—ã–≤–∞–º–∏!',reply_markup=kb.create_admin_event_with_review())


class Exel(StatesGroup):
    update = State()
@router_admin_panel.callback_query(lambda c: c.data.startswith("edit_excel"))
async def edit_exel(cq: CallbackQuery, state: FSMContext):
    file_path = "BotData/events.xlsx"
    await cq.message.edit_text('–í–æ—Ç Excel-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
    file_to_send = FSInputFile(file_path)
    await cq.message.answer('–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç–µ –ª–∏—à–Ω–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤. –ò–Ω–∞—á–µ –≤–∞–º –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
                            reply_markup=kb.excel_kb)
    await bot.send_document(chat_id=cq.message.chat.id, document=file_to_send)
    await state.set_state(Exel.update)

@router_admin_panel.message(F.content_type.in_({'text'}),Exel.update)
async def exel_message(message: Message, state: FSMContext):
    if message.text == '–ù–µ –º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π':
        await message.answer('–•–æ—Ä–æ—à–æ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º!',reply_markup=kb.admin_kb)
        await state.set_state(Admin.logined)
    else:
        await message.answer('–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª, –Ω–µ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –º–µ–Ω—è—Ç—å, '
                             '—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \'–ù–µ –º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\'')


@router_admin_panel.message(F.content_type.in_({'document'}),Exel.update)
async def handle_document(message: Message, state: FSMContext):
    document = message.document
    if document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
        file_id = document.file_id
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path
        file_name = 'user_events.xlsx'
        saved_file_path = f"BotData/{file_name}"
        await bot.download_file(file_path, saved_file_path)
        #time.sleep(2)
        is_ok = await che—Åk_user_exel()
        if is_ok:
            await update_excel()
            await message.answer('–°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!!!\n', reply_markup=kb.admin_kb)
            await state.set_state(Admin.logined)
            df = init_table()
            new_slovar(df)
            globals.arr_event_in_str = (rows_to_arr_str(df))
        else:
            await message.answer('–í—ã –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–ø—Ä–∏—è—Ç–∏–∏/—è—Ö –ª–∏–±–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Ñ–∞–π–ª –ª–∏—à–Ω–∏–µ —Å—Ç–æ–ª–±—Ü—ã!!!\n'
                                 '–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à Excel —Ñ–∞–π–ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!!!')
    else:
        await message.reply("–≠—Ç–æ –Ω–µ Excel —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx")



@router_admin_panel.message(F.text == '–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤—ãüí¨', Admin.logined)
async def list_review(message: Message):
    #df = init_table()
    await get_del_unnecessary_review()
    await debug_index()
    await message.answer('–í–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –æ—Ç–∑—ã–≤–∞–º–∏!',reply_markup=kb.create_admin_event_with_review())

@router_admin_panel.callback_query(lambda c: c.data.startswith("look_rev"))
async def look_reviews(cq: CallbackQuery):
    event_index = cq.data.split(":")[1]
    collection_reviews = await get_all_review_about(int(event_index))
    reviews_list = [i[0] for i in collection_reviews]
    marks_list = [i[1] for i in collection_reviews]
    event_name = await name_by_index(event_index)
    #print(event_index, reviews_list, list(events_data.keys()))
    await cq.message.edit_text(f'–í–æ—Ç –æ—Ç–∑—ã–≤—ã –æ {event_name}, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ!',
                               reply_markup=kb.create_admin_reviews_by_event(event_index,reviews_list,marks_list))

@router_admin_panel.callback_query(lambda c: c.data.startswith("rowid_del"))
async def look_review(cq: CallbackQuery):
    event_rowid = cq.data.split(":")[1]
    collection_reviews = await by_rowid_get_review(event_rowid)
    event_name = collection_reviews[0][0]
    event_review = collection_reviews[0][1]
    event_mark = collection_reviews[0][2]
    await cq.message.edit_text(f'–í—ã –¥–µ–π—Å—Ç–≤–∏–µ—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?\n'
                         f'–ù–∞–∑–≤–∞–Ω–∏–µ: {event_name}\n'
                         f'–û—Ç–∑—ã–≤: {event_review}\n'
                         f'–û—Ü–µ–Ω–∫–∞: {event_mark}',reply_markup=kb.create_del_or_no_rev_kb(event_rowid))

@router_admin_panel.callback_query(lambda c: c.data.startswith("go_kill"))
async def del_review(cq: CallbackQuery):
    event_rowid = cq.data.split(":")[1]
    event_col = await by_rowid_get_review(event_rowid)
    event_name = event_col[0][0]
    event_index = event_col[0][3]
    await delete_rowid(event_rowid)
    collection_reviews = await get_all_review_about(int(event_index))
    await cq.message.answer('–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
    if len(collection_reviews[0]):
        reviews_list = [i[0] for i in collection_reviews]
        marks_list = [i[1] for i in collection_reviews]
        await cq.message.answer('–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
        await cq.message.edit_text(f'–í–æ—Ç –æ—Ç–∑—ã–≤—ã –æ {event_name}, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ!',
                                   reply_markup=kb.create_admin_reviews_by_event(event_index, reviews_list, marks_list))
    else:
        await cq.message.answer('–¢–∞–∫ –∫–∞–∫ —É –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±–æ–ª—å—à–µ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤, –≤–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –æ—Ç–∑—ã–≤–∞–º–∏!',
                             reply_markup=kb.create_admin_event_with_review())

@router_admin_panel.callback_query(lambda c: c.data.startswith("to_review"))
async def no_del_review(cq: CallbackQuery):
    event_rowid = cq.data.split(":")[1]
    event_col = await by_rowid_get_review(event_rowid)
    event_name = event_col[0][0]
    event_index = event_col[0][3]
    collection_reviews = await get_all_review_about(int(event_index))
    reviews_list = [i[0] for i in collection_reviews]
    marks_list = [i[1] for i in collection_reviews]
    await cq.message.answer('–û—Ç–∑—ã–≤ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º!')
    await cq.message.edit_text(f'–í–æ—Ç –æ—Ç–∑—ã–≤—ã –æ {event_name}, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ!',
                               reply_markup=kb.create_admin_reviews_by_event(event_index, reviews_list, marks_list))

@router_admin_panel.message(F.text == '–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚öôÔ∏è', Admin.logined)
async def exit_admin(message: Message, state: FSMContext):
    await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',reply_markup=kb.main)
    tg_id = message.from_user.id
    await admin_out(tg_id)
    await state.clear()
