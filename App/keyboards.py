import random
from excel import init_table, url_to_ticket, check_ticket_cost
from admin_database import get_rowid, get_all_event_name_with_review
from globals import events_data


from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                            InlineKeyboardButton,InlineKeyboardMarkup)

main = ReplyKeyboardMarkup(keyboard=
                            [[KeyboardButton(text='MuseumGPT÷é')],
                            [KeyboardButton(text='–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–πüìÖ'),KeyboardButton(text='–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏üîî')],
                            [KeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –º—É–∑–µ—èüåê'),KeyboardButton(text='–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ãüí∏')],
                            [KeyboardButton(text='–ë–ª–∏–∂–∞–π—à–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–æ –º—É–∑–µ—èüõ£Ô∏è')],
						    [KeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –º—É–∑–µ—è‚úâÔ∏è')]
                             ],
                            resize_keyboard=True,
                            input_field_placeholder='–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω ?'
                           )

gptboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]],
        input_field_placeholder='–í–∞—à –∑–∞–ø—Ä–æ—Å...', resize_keyboard=True)



def create_keyboard(start=0, num_options=3):
    #init_slovar()
    df_orders = init_table()
    keys = list(events_data.keys())
    keyboard = []
    if start != 0:
        keyboard.append([InlineKeyboardButton(text="‚¨Ü –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data=f"previous:{start}")])
        
    for i in range(start, min(start + num_options, len(keys))):
        keyboard.append([InlineKeyboardButton(text=keys[i], callback_data=f"event:{i}")])
    
    if start + num_options < len(keys):
        keyboard.append([InlineKeyboardButton(text="‚¨á –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ", callback_data=f"show_more:{start + num_options}")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)



def create_info_event_keyboard (curr_index):
    event_name = list(events_data.keys())[curr_index]
    event_free = check_ticket_cost(event_name)
    #start = (curr_index // 3) * 3
    if not(event_free):
        return InlineKeyboardMarkup(inline_keyboard=
                                     [[InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µüí∏', url=f"{url_to_ticket(event_name)}")],
                                      [InlineKeyboardButton(text='–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?üîî', callback_data=f"how_notify_event:{curr_index}")],
                                      [InlineKeyboardButton(text='–û—Ç–∑—ã–≤—ã –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏üìù', callback_data=f"review:{curr_index}")],
                                      [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥',callback_data=f"back:{curr_index}")]
                                        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=
                                    [[InlineKeyboardButton(text='–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?üîî',
                                                           callback_data=f"how_notify_event:{curr_index}")],
                                     [InlineKeyboardButton(text='–û—Ç–∑—ã–≤—ã –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏üìù',
                                                           callback_data=f"review:{curr_index}")],
                                     [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data=f"back:{curr_index}")]
                                     ])
def create_review_keyboard(index, is_event_now = True):
    if is_event_now:
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ãüìã',callback_data=f"check_review:{index}"),
                                                                InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤‚úçÔ∏è',callback_data=f"write_review:{index}")],
                                                                [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥',callback_data=f"back_to_event_info:{index}")]])
    else:
        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data=f"back_to_event_info:{index}")]])
    return inline_keyboard

marks_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='1'),KeyboardButton(text='2'),KeyboardButton(text='3'),KeyboardButton(text='4'),KeyboardButton(text='5')]], resize_keyboard=True)
to_site = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ —Å–µ–π—á–∞—Å', url='https://–∫–∞–º–µ–Ω—Å–∫–∏–π-–º—É–∑–µ–π.—Ä—Ñ' )]])
to_afisha_site = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ widget.afisha.yandex.ru', url='https://widget.afisha.yandex.ru/w/venues/10315?clientKey=e6ca775a-c361-4b04-8cac-f3ae19bbd850&widgetName=w2' )]])

location = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüìç',request_location=True)],
        [KeyboardButton(text='–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é‚¨ÖÔ∏è')]],
        resize_keyboard=True)

send_mail = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')]],
        resize_keyboard=True)

def capch_kbr(emj):
    button_list = [[],[],[]]
    random.shuffle(emj)
    counter = 0
    for item in emj:
        if counter < 3:
            button_list[0].append(InlineKeyboardButton(text=item, callback_data=item))
        elif counter < 6:
            button_list[1].append(InlineKeyboardButton(text=item, callback_data=item))
        else:
            button_list[2].append(InlineKeyboardButton(text=item, callback_data=item))
        counter += 1
    keyboard = InlineKeyboardMarkup(inline_keyboard=button_list)
    return keyboard


submit_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å'), KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')]
    ],
    resize_keyboard=True
)


admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—Éüì£')],
        [KeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–πüìÖ')],
        [KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤—ãüí¨')],
        [KeyboardButton(text='–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚öôÔ∏è')]
    ],
    resize_keyboard=True
)

event_editor_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µüìù',callback_data='add_event'),
                                                         InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µüóëÔ∏è',callback_data='delete_event')],
                                                        [InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ ExcelùÑú', callback_data='edit_excel')]])

def create_add_event_kb(event_name='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', event_describe='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
                        event_start_time='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', event_end_time='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
                        event_cost='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å', event_url='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–∞'):
    event_name = '–ù–∞–∑–≤–∞–Ω–∏–µ: ' + event_name
    event_describe = '–û–ø–∏—Å–∞–Ω–∏–µ: ' + event_describe
    event_start_time='–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ' + event_start_time
    event_end_time='–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞: ' + event_end_time
    event_cost = '–°—Ç–æ–∏–º–æ—Å—Ç—å: ' + event_cost
    event_url = '–°—Å—ã–ª–∫–∞: ' + event_url
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=event_name, callback_data='name'),InlineKeyboardButton(text=event_describe, callback_data='describe')],
                                                      [InlineKeyboardButton(text=event_start_time,callback_data='start_time'),InlineKeyboardButton(text=event_end_time,callback_data='end_time')],
                                                      [InlineKeyboardButton(text=event_cost, callback_data='cost'),InlineKeyboardButton(text=event_url, callback_data='ticket_url')]])

    return inline_kb

add_event_param = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',callback_data='add_event'),
                                                         InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',callback_data='last_event')]])

def create_add_kb(is_can_add):
    keybd = []
    if is_can_add:
        keybd.append([KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'), KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ')])
    else:
        keybd.append([KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ')])
    kb = ReplyKeyboardMarkup(keyboard=keybd, resize_keyboard=True)
    return kb

go_meling = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É‚úî'),
                                                  KeyboardButton(text='–ù–µ –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')]], resize_keyboard=True)

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


def create_admin_event_list():
    inline_kb = []
    df = init_table()
    keys = list(events_data.keys())
    for i in range(len(keys)):
        inline_kb.append([InlineKeyboardButton(text=keys[i], callback_data=f'to_delete:{i}')])
    inline_kb.append([InlineKeyboardButton(text='‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='to_admin')])
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    return keyboard

def create_del_or_no_kb(index):
    return (InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µüóëÔ∏è',callback_data=f'go_del:{index}'),
                                                      InlineKeyboardButton(text='‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É',callback_data='to_list')]]))


def create_admin_event_with_review():
    inline_kb = []
    collection_review = get_all_event_name_with_review()
    events_names = [i[0] for i in collection_review]
    events_index = [i[1] for i in collection_review]
    for i in range(len(events_names)):
        inline_kb.append([InlineKeyboardButton(text=events_names[i], callback_data=f'look_rev:{events_index[i]}')])
    inline_kb.append([InlineKeyboardButton(text='‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='to_admin')])
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    return keyboard

def create_admin_reviews_by_event(event_index, reviews_list, marks_list):
    inline_kb = []
    for i in range(len(reviews_list)):
        rowid = get_rowid(event_index,
                           reviews_list[i], marks_list[i])
        inline_kb.append([InlineKeyboardButton(text=f'–û—Ç–∑—ã–≤: {reviews_list[i]} –û—Ü–µ–Ω–∫–∞: {marks_list[i]}', callback_data=f'rowid_del:{rowid}')])
    inline_kb.append([InlineKeyboardButton(text='‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –æ—Ç–∑—ã–≤–∞–º–∏', callback_data='to_events')])
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    return keyboard



def create_del_or_no_rev_kb(rowid):
    return (InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤üóëÔ∏è',callback_data=f'go_kill:{rowid}'),
                                                      InlineKeyboardButton(text='‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É',callback_data=f'to_review:{rowid}')]]))
def create_notification_keyboard(curr_index):
    return InlineKeyboardMarkup(inline_keyboard=
        [
            [InlineKeyboardButton(
                text='–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ 3 –¥–Ω—è',
                callback_data= f"notify_event:{curr_index}:3days")],
            [InlineKeyboardButton(
                text='–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ 1 –¥–µ–Ω—å',
                callback_data= f"notify_event:{curr_index}:1day"
            )],
            [InlineKeyboardButton(
                text='–í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è',
                callback_data= f"notify_event:{curr_index}:custom"
            )]
        ]
    )
def back_to_and_tickets(index):
     return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ widget.afisha.yandex.ru', url='https://widget.afisha.yandex.ru/w/venues/10315?clientKey=e6ca775a-c361-4b04-8cac-f3ae19bbd850&widgetName=w2' )],
                                                  [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º',callback_data=f"back:{index}")]])


def back_to_events (index):
     return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º',callback_data=f"back:{index}")]])


def future_create_keyboard(start=0, num_options=3):
    from handlers import event_isnt_going_now
    df_orders = init_table()
    keys = list(events_data.keys())
    keyboard = []
    counter_future_event = 0
    for i in range(len(keys)):
        if event_isnt_going_now(i):
            keyboard.append([InlineKeyboardButton(text=keys[i], callback_data=f"future_event:{i}")])
            counter_future_event += 1


    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def counter_future_event():
    from handlers import event_isnt_going_now
    keys = list(events_data.keys())
    counter = 0
    for i in range(len(keys)):
        if event_isnt_going_now(i):
            counter += 1
            break;
    return counter

def future_create_info_event_keyboard (curr_index):
    #start = (curr_index // 3) * 3
    return InlineKeyboardMarkup(inline_keyboard=
                                 [[InlineKeyboardButton(text='–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?üîî', callback_data=f"future_how_notify_event:{curr_index}")],
                                  [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥',callback_data=f"future_back:{curr_index}")]
                                   ])
def future_create_notification_keyboard(curr_index):
    return InlineKeyboardMarkup(inline_keyboard=
        [
            [InlineKeyboardButton(
                text='–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ 3 –¥–Ω—è',
                callback_data= f"fnotify_event:{curr_index}:3days")],
            [InlineKeyboardButton(
                text='–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ 1 –¥–µ–Ω—å',
                callback_data= f"fnotify_event:{curr_index}:1day"
            )],
            [InlineKeyboardButton(
                text='–í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è',
                callback_data= f"fnotify_event:{curr_index}:custom"
            )]
        ]
    )

excel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text='–ù–µ –º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')]
    ], resize_keyboard=True
)