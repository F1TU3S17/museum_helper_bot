import asyncio
from datetime import datetime, timedelta
from globals import events_data, user_data
import smpt
import random
from gpt import *
from create_way_to_museum import *
from database import *
from excel import event_isnt_going_now, event_state
from helpful_function import counter_future_event
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton

from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from aiogram import exceptions
from aiogram.exceptions import TelegramAPIError
from aiogram.utils import chat_action
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.chat_action import ChatActionSender
import keyboards as kb
router = Router()

bot = Bot(token='6971765827:AAGGYCGi7ouJ_0A5ZKwFX-VPbm5Cl_sSI68')
emojis = ['üü¶','üü®','üü™','üü©','üü•','üüß','üü´','‚¨úÔ∏è','‚¨õÔ∏è']
class Gpt(StatesGroup):
    prompt = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–≤–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–µ–º –º—É–∑–µ–µ MuseumGPT –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç)\n'
                        '–ê —Ç–∞–∫–∂–µ –ø–æ–ª—å–∑—É–π—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∏—Ö –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –ø—Ä–æ–ø–∏—à–∏ /help', reply_markup=kb.main)
    await cmd_start_db(message.from_user.id)
@router.message(Command('main'))
async def cmd_main(message: Message):
    await message.answer('–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=kb.main)
    await cmd_start_db(message.from_user.id)
@router.message(Command('help'))
async def helper(message: Message):
    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É - /start, –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é - /main')
    await message.answer(
        '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –ö–∞–º–µ–Ω—Å–∫–∏–π –º—É–∑–µ–π. –õ—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –º—É–∑–µ–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n'
        '–¢–∞–∫–∂–µ –≤ –±–æ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n'
        '1. MuseumGPT: –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –º—É–∑–µ—è. –ó–∞–¥–∞–≤–∞–π—Ç–µ –µ–º—É –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ –æ–Ω –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å.\n'
        '2. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: –∑–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –≤ –º—É–∑–µ–µ, –∫–∞–∫–∏–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–µ–π—á–∞—Å, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∏—Ö –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π.\n'
        '3. –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–æ–º–µ–Ω—Ç.\n'
        '4. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –º—É–∑–µ—è: –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –º—É–∑–µ—è –≤ –¥–≤–∞ –∫–ª–∏–∫–∞.\n'
        '5. –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã: –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –≤ –¥–≤–∞ –∫–ª–∏–∫–∞.\n'
        '6. –ë–ª–∏–∂–∞–π—à–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–æ –º—É–∑–µ—è: —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–æ –º—É–∑–µ—è, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n'
        '7. –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –º—É–∑–µ—è: –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –º—É–∑–µ—è\n')

@router.message(F.text == '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–πüìÖ')
async def calendar(message: Message):
    await message.reply('–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–∏–≥–ª—è–Ω—É–≤—à–µ–µ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ —É–∑–Ω–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:',reply_markup= kb.create_keyboard())

@router.callback_query(lambda c: c.data.startswith("previous"))
async def previous_events(callback_query: CallbackQuery):
    start = int(callback_query.data.split(":")[1])-3
    await callback_query.message.edit_reply_markup(reply_markup=kb.create_keyboard(start))

@router.callback_query(lambda c: c.data.startswith("show_more"))
async def show_more_callback(callback_query: CallbackQuery):
    start = int(callback_query.data.split(":")[1])
    await callback_query.message.edit_reply_markup(reply_markup=kb.create_keyboard(start))

@router.callback_query(lambda c: c.data.startswith("event") or c.data.startswith("back_to_event_info"))
async def event_callback(callback_query: CallbackQuery):
    index = int(callback_query.data.split(":")[1])
    keys = list(events_data.keys())
    event_name = keys[index]
    event_info = events_data[event_name]
    list_discribe_state = ['üü•–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–µ–º!!!\n','üü©–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–¥–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —É—Å–ø–µ–π—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å!!!\n', 'üü®–ú–µ—Ä–ø—Ä–∏—è—Ç–∏–µ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è, –ø–æ—Å—Ç–∞–≤—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –æ –µ–≥–æ –Ω–∞—á–∞–ª–µ!!!\n',]
    await callback_query.message.edit_text(
        text=f"{list_discribe_state[event_state(index)]}–í–∞—à –≤—ã–±–æ—Ä: \"{event_name}\"\n\n{event_info}",
        reply_markup= kb.create_info_event_keyboard(index)
    )
 
@router.callback_query(lambda c: c.data.startswith("back"))
async def backward(callback_query: CallbackQuery):
    await callback_query.message.edit_text('–í–æ—Ç –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—èüìÖ')
    index = int(callback_query.data.split(":")[1])
    start = (index // 3) * 3
    await callback_query.message.edit_reply_markup(reply_markup=kb.create_keyboard(start))

@router.callback_query(lambda c: c.data.startswith("review"))
async def review_callback(callback_query: CallbackQuery):
    event_index = str(callback_query.data.split(":")[1])
    event_name = list(events_data.keys())[int(event_index)]
    event_avg_mark = await avg_mark_review(event_name)
    event_count_review = await count_review(event_name)
    if not (event_isnt_going_now(int(event_index))):
        await callback_query.message.edit_text(text=f"–í–∞—à –≤—ã–±–æ—Ä:\"{event_name}\"\n –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ***{event_avg_mark}/5*** , –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ***{event_count_review}***",
                                           reply_markup=kb.create_review_keyboard(event_index), parse_mode='Markdown')
    else:
        await callback_query.message.edit_text(
            text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å, –ø–æ—ç—Ç–æ–º—É —É –Ω–µ–≥–æ –µ—â–µ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤üòä\n–í–æ–∑—Ä–∞—â–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π, –∫–æ–≥–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç",
            reply_markup=kb.create_review_keyboard(event_index, False))
   
@router.callback_query(lambda c: c.data.startswith("future_event"))
async def future_event_callback(callback_query: CallbackQuery):
    index = int(callback_query.data.split(":")[1])
    keys = list(events_data.keys())
    event_name = keys[index]
    event_info = events_data[event_name]
    await callback_query.message.edit_text(
        text=f"–í–∞—à –≤—ã–±–æ—Ä: \"{event_name}\"\n\n{event_info}",
        reply_markup= kb.future_create_info_event_keyboard(index)
    )
    
@router.callback_query(lambda c: c.data.startswith("future_back"))
async def future_backward(callback_query: CallbackQuery):
    await callback_query.message.edit_text('–í–æ—Ç –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—èüìÖ')
    index = int(callback_query.data.split(":")[1])
    start = (index // 3) * 3
    await callback_query.message.edit_reply_markup(reply_markup=kb.future_create_keyboard(start))

class Review(StatesGroup):
    index = State()
    message = State()
    mark = State()
    capch = State()
    capch_is_true = State()

@router.callback_query(lambda c: c.data.startswith("check_review"))
async def chek_review_callback(callback_query: CallbackQuery):
    event_index = str(callback_query.data.split(":")[1])
    #print(event_index)
    event_name = list(events_data.keys())[int(event_index)]
    review_collection = await look_review(event_name)
    if len(review_collection[0]):
        review_list = [i[0] for i in review_collection]
        mark_list = [i[1] for i in review_collection]
        output_str = f"–û—Ç–∑—ã–≤—ã –æ {event_name}\n"
        for i in range(len(review_list)):
            output_str += "‚Åò‚Äî " + " –û—Ç–∑—ã–≤ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è: " + str(review_list[i]) + ". –û—Ü–µ–Ω–∫–∞: " + str(mark_list[i]) + "‚òÖ" +"\n"
        await callback_query.message.edit_text(text=output_str, reply_markup=kb.create_review_keyboard(event_index))
    else:
        await callback_query.message.edit_text(text="–£ —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –µ—â–µ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–πüòä",
                                               reply_markup=kb.create_review_keyboard(event_index))


@router.callback_query(lambda c: c.data.startswith("write_review"))
async def get_review_callback(callback_query: CallbackQuery, state: FSMContext):
    event_index = str(callback_query.data.split(":")[1])
    await state.update_data(index=int(event_index))
    await state.set_state(Review.message)
    await callback_query.message.edit_text(text="–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∞—à –æ—Ç–∑—ã–≤")
    await callback_query.message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏")

@router.message(Review.message)
async def get_mark_callback(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    await state.set_state(Review.mark)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é',reply_markup=kb.marks_keyboard)

@router.message(Review.mark)
async def set_capth(message: Message, state: FSMContext):
    await state.update_data(mark=message.text)
    await message.answer('–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—Ç—á—É')
    correct_emoji = random.choice(emojis)
    await state.update_data(capch=correct_emoji)
    await state.set_state(Review.capch)
    await message.reply(f'–í—ã–±–µ—Ä–∏: "{correct_emoji}"', reply_markup=kb.capch_kbr(emojis))
@router.callback_query(Review.capch)
async def check_capth(cq: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    capch_color = data.get('capch')
    if (cq.data == capch_color):
        await cq.message.edit_text('–í–µ—Ä–Ω–æ! Capcha –ø—Ä–æ–π–¥–µ–Ω–∞')
        await cq.message.reply('–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=kb.submit_kb)
        await state.set_state(Review.capch_is_true)
    else:
        correct_emoji = random.choice(emojis)
        await state.update_data(capch=correct_emoji)
        await cq.message.edit_text(f'–î—Ä—É–≥–æ–π —Ü–≤–µ—Ç! "{correct_emoji}"', reply_markup=kb.capch_kbr(emojis))



async def send_message_to_admin(admins, data_name, data_mark,data_message):
    for admin in admins:
        try:
            async with ChatActionSender.typing(bot=bot, chat_id=admin):
                await bot.send_message(admin, f'–ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {data_name} –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∑—ã–≤\n–û—Ü–µ–Ω–∫–∞:{data_mark}\n'
                                              f'–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: \"{data_message}\"\n'
                                              f'–ï—Å–ª–∏ –æ—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫–∏ –∏–ª–∏ —Å –Ω–∏–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        except exceptions.TelegramForbiddenError:
            print("Admin error")
        except Exception as e:
            print("Admin error")


@router.message(Review.capch_is_true)
async def check_capth(message: Message, state: FSMContext):
    await state.update_data(capch_is_true=message.text)
    data = await state.get_data()
    submit = data.get('capch_is_true')
    if submit == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        data_index = data.get('index')
        data_message = data.get('message')
        data_mark = data.get('mark')
        data_name = list(events_data.keys())[int(data_index)]
        tg_id = message.from_user.id
        is_id_unique = await add_event_review(tg_id, data_index, data_name, data_message, data_mark)
        if (is_id_unique):
            await message.answer('***–ò–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞***‚è≥', parse_mode='Markdown',reply_markup=kb.main)
            await message.answer('–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',reply_markup=kb.create_keyboard())
            admins = await admins_list()
            #print(admins)
            try:
                await send_message_to_admin(admins, data_name, data_mark, data_message)
            except exceptions.TelegramForbiddenError:
                print("Admin error")
            except Exception as e:
                print("Admin error")

        else:
            await message.answer('–¢–∞–∫...', reply_markup=kb.main)
            await message.answer('–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', reply_markup=kb.create_keyboard())
    else:
        await message.answer('–•–æ—Ä–æ—à–æ!', reply_markup=kb.main)
        await message.answer('–ö–∞–∫ –≤–∞–º —É–≥–æ–¥–Ω–æ!', reply_markup=kb.create_keyboard())

    await state.clear()

@router.message(F.text == 'MuseumGPT÷é')
async def gpt(message: Message, state: FSMContext):
    await state.set_state(Gpt.prompt)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å...', reply_markup=kb.gptboard, parse_mode='markdown')

@router.message(Gpt.prompt)
async def get_prompt(message: Message, state: FSMContext):
    await state.update_data(prompt=message.text)
    data = await state.get_data()
    user_prompt = str(data.get('prompt'))
    #print('–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', user_prompt)
    if user_prompt == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await state.clear()
        await message.reply('–•–æ—Ä–æ—à–æ!', reply_markup= kb.main)
    else:
        await message.answer('***–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞***‚è≥',parse_mode='Markdown')
        answer = message_to_chat_gpt(user_prompt)
        await message.reply(answer, reply_markup= kb.gptboard)
        #print('–û—Ç–≤–µ—Ç –ò–ò: ', answer)
        await state.clear()
        await state.set_state(Gpt.prompt)



@router.message(F.text == '–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏üîî')
async def add_notifications_about_event(message: Message):
    if(counter_future_event()):
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ –Ω–∞—á–∞–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', reply_markup=kb.future_create_keyboard())
    else:
        await message.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–µ –Ω–∞—á–∞–≤—à–∏—Ö—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —É–∂–µ –∏–¥—É—â–∏–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
                            reply_markup=kb.main)


@router.message(F.text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –º—É–∑–µ—èüåê')
async def to_web(message: Message):
    await message.reply('–ù–∞—à —Å–∞–π—Ç: –∫–∞–º–µ–Ω—Å–∫–∏–π-–º—É–∑–µ–π.—Ä—Ñ', reply_markup=kb.to_site)

@router.message(F.text == '–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ãüí∏')
async def to_afisha(message: Message):
    await message.reply('–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö —Ç—É—Ç:', reply_markup=kb.to_afisha_site)


@router.message(F.content_type == 'location')
async def create_way(message: Message):
    user_latitude = message.location.latitude
    user_longitude = message.location.longitude
    start_coord = (user_latitude, user_longitude)
    yandex_map_url = create_yandex_route_link(start_coord)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –º–∞—Ä—à—Ä—É—Ç—É', url=yandex_map_url)
    )

    await message.answer('–í–∞—à –º–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:', reply_markup=builder.as_markup())
    await message.reply('–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å ?', reply_markup=kb.main)

@router.message(F.text == '–ë–ª–∏–∂–∞–π—à–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–æ –º—É–∑–µ—èüõ£Ô∏è')
async def get_location(message: Message):
    await message.reply('–ß—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç, –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Å–µ–π—á–∞—Å)', reply_markup=kb.location)

@router.message(F.text == '–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é‚¨ÖÔ∏è')
async def not_get_location(message: Message):
    await message.reply('–û–∫–µ–π, –µ—Å–ª–∏ —á—Ç–æ –ø–æ—Å—Ç—Ä–æ–∏–º —Ç–µ–±–µ –º–∞—Ä—à—Ä—É—Ç –¥–æ –Ω–∞—à–µ–≥–æ –º—É–∑–µ—è)', reply_markup=kb.main)

class Message_to_email(StatesGroup):
    message = State()
    capch = State()
    capch_is_true = State()

@router.message(F.text == '–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –º—É–∑–µ—è‚úâÔ∏è')
async def start_msg(message: Message, state: FSMContext):
    await state.set_state(Message_to_email.message)
    await message.answer('–ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=kb.send_mail)

@router.message(Message_to_email.message)
async def get_message_to_email(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    data = await state.get_data()
    user_message = (data.get('message'))
    #print("–°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –æ—Ç–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user_message)
    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await state.clear()
        await message.reply('–•–æ—Ä–æ—à–æ!', reply_markup= kb.main)
    else:
        await message.reply('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É')
        correct_emoji = random.choice(emojis)
        await state.update_data(capch=correct_emoji)
        await state.set_state(Message_to_email.capch)
        await message.reply(f'–í—ã–±–µ—Ä–∏: "{correct_emoji}"', reply_markup=kb.capch_kbr(emojis))


@router.callback_query(Message_to_email.capch)
async def checked_correct(cq: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    capch_color = data.get('capch')
    #print('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–ø—Ç—á–∏: ', cq.data, capch_color)
    if(cq.data == capch_color):
        await cq.message.edit_text('–í–µ—Ä–Ω–æ! Capcha –ø—Ä–æ–π–¥–µ–Ω–∞')
        await cq.message.reply('–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=kb.submit_kb)
        await state.set_state(Message_to_email.capch_is_true)
    else:
        correct_emoji = random.choice(emojis)
        await state.update_data(capch=correct_emoji)
        await cq.message.edit_text(f'–î—Ä—É–≥–æ–π —Ü–≤–µ—Ç! "{correct_emoji}"', reply_markup=kb.capch_kbr(emojis))

@router.message(Message_to_email.capch_is_true)
async def submit_message_to_email(message: Message, state: FSMContext):
    await state.update_data(capch_is_true=message.text)
    data = await state.get_data()
    user_message = (data.get('message'))
    user_choice = (data.get('capch_is_true'))
    if user_choice != '–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É':
        await message.answer('***–ò–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞***üì©', parse_mode='Markdown')
        await smpt.send_mail(user_message)
        await message.reply('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=kb.main)
        admins = await admins_list()
        counter = 0
        for admin in admins:
            await bot.send_message(admin, f'–¢–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É\n'
                                          f'–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: \"{user_message}\"\n')
            counter += 1
        #print('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
        await state.clear()
    else:
        await message.reply('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=kb.main)
        await state.clear()

@router.callback_query(lambda c: c.data.startswith("how_notify_event"))
async def how_notify_event(callback_query: CallbackQuery):
    index= int(callback_query.data.split(":")[1])
    df = init_table()
    event_start = pd.to_datetime(df.iloc[index]['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'])
    
    current_time = datetime.now()
    delay = (event_start - current_time).total_seconds()
    if delay > 0:
        await callback_query.message.edit_reply_markup(reply_markup= kb.create_notification_keyboard(index))
    else:
        
        await callback_query.message.edit_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∏–¥—ë—Ç, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–º! –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –º—É–∑–µ—è: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 18:00, –∫—Ä–æ–º–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞. \n –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–Ω–∏–µ, –ø–µ—Ä–µ–π–¥—è –Ω–∞ —Å–∞–π—Çüé´:",
                            reply_markup=kb.back_to_and_tickets(index))


class Notify(StatesGroup):
    get = State()
    future_get = State()

@router.callback_query(lambda c: c.data.startswith("notify_event"))
async def handle_notification_query(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    data = callback_query.data.split(':')
    curr_index = int(data[1])
    action = data[2]
    df = init_table()
    event = df.iloc[curr_index]
    event_name = event['–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è']
    event_start = pd.to_datetime(event['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'])

    remind_time = None
    if action == "3days":
        remind_time = event_start - timedelta(days=3)
        await schedule_notification(callback_query.from_user.id, event_name, remind_time, bot)

    elif action == "1day":
        remind_time = event_start - timedelta(days=1)
        await schedule_notification(callback_query.from_user.id, event_name, remind_time, bot)

    elif action == "custom":
        await state.set_state(Notify.get)
        user_data[callback_query.from_user.id] = {'event_name': event_name, 'curr_index': curr_index}
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")

    await callback_query.answer()

@router.message(Notify.future_get)
async def custom_time_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in user_data:
        user_input = user_data[user_id]
        if 'remind_date' not in user_input:
            try:
                remind_date = datetime.strptime(message.text, '%d-%m-%Y').date()
                user_data[user_id]['remind_date'] = remind_date
                await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.")
        else:
            try:
                remind_time_str = message.text
                remind_time = datetime.strptime(remind_time_str, '%H:%M').time()
                remind_datetime = datetime.combine(user_input['remind_date'], remind_time)
                df = init_table()
                event_start = pd.to_datetime(df.iloc[user_input['curr_index']]['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'])
                
                if remind_datetime < event_start:
                    await schedule_future_notification(user_id, user_input['event_name'], remind_datetime, message.bot)
                else:
                    await message.answer("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –∂–µ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫–æ –≤—Å–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –Ω–∞–∂–º–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:",
                                         reply_markup=kb.back_to_events(0))
                del user_data[user_id]
                await state.clear()
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")


@router.message(Notify.get)
async def custom_time_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in user_data:
        user_input = user_data[user_id]
        if 'remind_date' not in user_input:
            try:
                remind_date = datetime.strptime(message.text, '%d-%m-%Y').date()
                user_data[user_id]['remind_date'] = remind_date
                await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.")
        else:
            try:
                remind_time_str = message.text
                remind_time = datetime.strptime(remind_time_str, '%H:%M').time()
                remind_datetime = datetime.combine(user_input['remind_date'], remind_time)
                df = init_table()
                event_start = pd.to_datetime(df.iloc[user_input['curr_index']]['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'])

                if remind_datetime < event_start:
                    await schedule_notification(user_id, user_input['event_name'], remind_datetime, message.bot)
                else:
                    await message.answer(
                        "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –∂–µ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫–æ –≤—Å–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –Ω–∞–∂–º–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:",
                        reply_markup=kb.back_to_events(0))
                del user_data[user_id]
                await state.clear()
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")

async def schedule_notification(user_id: int, event_name: str, remind_time: datetime, bot: Bot):
    current_time = datetime.now()
    delay = (remind_time - current_time).total_seconds()

    if delay > 0:
        asyncio.get_event_loop().call_later(delay, lambda: asyncio.create_task(send_notification(user_id, event_name, bot)))
        await bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ \"{event_name}\" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_time}.",
                               reply_markup=kb.main)
        await bot.send_message(user_id, "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫–æ –≤—Å–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –Ω–∞–∂–º–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:",
                               reply_markup=kb.back_to_events(0))
    else:
        await bot.send_message(user_id, "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –∂–µ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫–æ –≤—Å–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –Ω–∞–∂–º–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:",
                               reply_markup=kb.back_to_events(0))

async def send_notification(user_id: int, event_name: str, bot: Bot):
    await bot.send_message(user_id, f"üéâ–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_name}! \n –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö —Ç—É—Çüé´:",
                            reply_markup=kb.to_afisha_site)


@router.callback_query(lambda c: c.data.startswith("future_how_notify_event"))
async def how_notify_event(callback_query: CallbackQuery):
    index= int(callback_query.data.split(":")[1])
    await callback_query.message.edit_reply_markup(reply_markup= kb.future_create_notification_keyboard(index))
    

@router.callback_query(lambda c: c.data.startswith("fnotify_event"))
async def handle_notification_query(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    data = callback_query.data.split(':')
    curr_index = int(data[1])
    action = data[2]
    df = init_table()
    event = df.iloc[curr_index]
    event_name = event['–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è']
    event_start = pd.to_datetime(event['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'])

    remind_time = None
    if action == "3days":
        remind_time = event_start - timedelta(days=3)
        await schedule_future_notification(callback_query.from_user.id, event_name, remind_time, bot)

    elif action == "1day":
        remind_time = event_start - timedelta(days=1)
        await schedule_future_notification(callback_query.from_user.id, event_name, remind_time, bot)

    elif action == "custom":
        await state.set_state(Notify.future_get)
        user_data[callback_query.from_user.id] = {'event_name': event_name, 'curr_index': curr_index}
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")

    await callback_query.answer()

async def schedule_future_notification(user_id: int, event_name: str, remind_time: datetime, bot: Bot):
    current_time = datetime.now()
    delay = (remind_time - current_time).total_seconds()

    if delay > 0:
        asyncio.get_event_loop().call_later(delay, lambda: asyncio.create_task(send_notification(user_id, event_name, bot)))
        await bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ \"{event_name}\" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_time}.",
                               reply_markup=kb.main)
        await bot.send_message(user_id, "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ",
                               reply_markup=kb.future_create_keyboard())

    else:
        await bot.send_message(user_id, "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
        await bot.send_message(user_id, "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ",
                               reply_markup=kb.future_create_keyboard())
